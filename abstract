#!/usr/bin/env python3
from  matplotlib.patches import Patch
import networkx as nx
import matplotlib.pyplot as plt
from matplotlib.ticker import NullLocator

from tree import create_graph as original_tree

try:
    from networkx.drawing.nx_agraph import graphviz_layout
except ImportError:
    raise ImportError("This example needs Graphviz and either PyGraphviz or Pydot")

import pandas


passive = {61, 58, 57, 56, 55, 48, 47, 41, 22, 14, 11, 1, 35}

propagationData = pandas.read_csv('propagation.csv')
alarmData       = pandas.read_csv('smoothed_alarm_strengths.csv')

def visualize():
    # dot, neato, fdp, sfdp, twopi, circo: see https://www.graphviz.org/
    pos = graphviz_layout(original_tree()[0], prog='dot', args='')
    for second in range(35, 163):
        interactions = propagationData[(propagationData.TimeForAlarm == second)]
        alarmSecondData = alarmData[(alarmData.Frame < (second + 1) * 30) & (alarmData.Frame > (second) * 30)]
        for frame in range(29):

            alarmFrameData = alarmSecondData.iloc[frame]
            G = nx.DiGraph()
            colorMap = []
            whiteLabels = dict()
            blackLabels = dict()
            alarmedAnts = [(i, alarmFrameData['V' + str(i)]) for i in range(1, 62)]
            alarmedAnts = sorted(alarmedAnts, key=lambda t : t[1])
            for i, strength in alarmedAnts:
                if i not in passive:
                    G.add_node(i)
                    colorMap.append(strength)
            for index, row in interactions.iterrows():
                source, dest = row['AlarmedFrom'], row['Alarmed']
                assert source not in passive, str(source)
                assert dest not in passive, str(dest)
                if not row['Self-Excitation']:
                    G.add_edge(source, dest)
            for i, strength in alarmedAnts:
                if i not in passive:
                    if strength > 0.5:
                        whiteLabels[i] = str(i)
                    else:
                        blackLabels[i] = str(i)

            plt.subplots_adjust(top = 1, bottom = 0, right = 1, left = 0,
                    hspace = 0, wspace = 0)
            plt.axis('off')
            plt.gca().xaxis.set_major_locator(NullLocator())
            plt.gca().yaxis.set_major_locator(NullLocator())
            plt.tight_layout()

            fsize = 12
            nx.draw(G, pos, node_color=colorMap, node_size=300, cmap=plt.cm.Reds)
            nx.draw_networkx_labels(G, pos, labels=whiteLabels, font_size=fsize, font_color='w')
            nx.draw_networkx_labels(G, pos, labels=blackLabels, font_size=fsize, font_color='k')
            print(second * 30 + frame)
            plt.savefig('abstract_frames/{}.png'.format(str(second * 30 + frame).rjust(4, '0')), dpi=300, bbox_inches='tight')
            plt.clf()

visualize()
