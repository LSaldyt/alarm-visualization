#!/usr/bin/env python3
# Lucas Saldyt 2019

# Data processing libraries
import pandas
import numpy as np

# Plotting library
#from matplotlib.transforms import Bbox
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
# Graph plotting library
import networkx as nx

import seaborn as sns

# Load three separate CSV files as pandas dataframes.
#alarmData       = pandas.read_csv('alarm_strengths.csv')
alarmData       = pandas.read_csv('smoothed_alarm_strengths.csv')
# Organize physical data by frames
physicalData    = [item for item in pandas.read_csv('physical_data.csv').groupby('frames')]
propagationData = pandas.read_csv('propogation_new.csv')

# Iterate over alarmData (alarm_strengths.csv)
for index, row in alarmData.iterrows(): # Go over data by rows
    # Some SO code that makes the image fullscreen when plotted
    #fig = plt.figure(frameon=False, figsize=(10, 10))
    fig, ax = plt.subplots(frameon=False)
    #fig, (ax, ax2) = plt.subplots(ncols=2, frameon=False)
    #ax2 = fig.add_axes(ax.get_position(), frameon=False)
    ax.set_axis_off()
    #fig.add_axes(ax)
    
    # Initialize a graph to overlay on the video
    G = nx.Graph()
    colorMap = []

    # Extract the current frame from the row of data
    frame = int(row['Frame']) 
    # Extract positional information for the current frame
    frameData = physicalData[frame][1] 
    # Extract interactions that occur within a period relative to the current frame
    # Syncing occurs here. Right now it is set to the period (-2s, 0s) from the current frame
    # interactions = propagationData[(((propagationData.frame - 2) * 30 < frame)
    #                              & (((propagationData.frame) * 30) > frame))]
    interactions = propagationData[(((propagationData.frame) * 30 < frame)
                                 & (((propagationData.frame + 2) * 30) > frame))]


    # Load the background image for the frame and plot it
    img = mpimg.imread('reference_frames/output_{}.png'.format(str(frame).rjust(4, '0')))
    ax.imshow(img, aspect='equal')
    #ax2.set_xlim(0.0, 1.0)
    #ax2.set_ylim(0.0, 2.0)
    #ax2 = sns.distplot(row, kde=True, rug=True, hist=True, norm_hist=True,
    #         bins = [0.0, 0.305, 0.749, 1.0],
    #         hist_kws={"lw":3, "edgecolor": (1,0.3,0.1,0.6),
    #             "color":(1,0.3,0.1,0.1),"alpha":None, "density":1.0})
    #ax2.set_xlabel('Alarm strength')
    #ax2.set_ylabel('Density')

    # Loop over each ant
    for i in range(1, 62):
        # Extract physical ant data
        antData = frameData[(frameData.id == i)]
        # Extract position
        x = float(antData['locX'])
        y = float(antData['locY'])
        # Add ant position to current graph
        G.add_node(i, pos=(x, y), label=str(i))
        # Extract alarm strength
        alarm_strength = row['V' + str(i)]
        # Colorize the currrent ant based on alarm strength
        colorMap.append(alarm_strength)

    # Loop over interactions that occur in the active period
    for index, row in interactions.iterrows():
        # Extract..
        source, dest = row['AlarmedFrom'], row['Alarmed']
        if not row['Self-Excitation']:
            # Add edges to the graph representing an interaction
            #G.add_edge(source, dest)
            pass

    # Create a bounding box for the plot
    #bbox = Bbox(np.array([[0,0],[11,11]]))

    pos = nx.get_node_attributes(G, 'pos')
    # Draw the graph on top of the background
    nx.draw(G, pos, ax=ax, node_color=colorMap, node_size=25, cmap=plt.cm.Reds, with_labels=True, font_size=12)

    # Save the frame-image and clear the plot
    fig.savefig('frames/{}.png'.format(str(frame).rjust(4, '0')), dpi=80)
    fig.clf()
    del img
    print('{}/{}'.format(frame, alarmData.Frame.max()))
