#!/usr/bin/env python3
# Lucas Saldyt 2019

# Data processing libraries
import pandas
import numpy as np

# Plotting library
#from matplotlib.transforms import Bbox
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
from matplotlib.ticker import NullLocator
# Graph plotting library
import networkx as nx

import seaborn as sns

original = {17, 19, 25}

# Load three separate CSV files as pandas dataframes.
#alarmData       = pandas.read_csv('alarm_strengths.csv')
alarmData       = pandas.read_csv('smoothed_alarm_strengths.csv')
# Organize physical data by frames
physicalData    = [item for item in pandas.read_csv('physical_data.csv').groupby('frames')]
propagationData = pandas.read_csv('UpdatedPropagationRecords.csv')

# Iterate over alarmData (alarm_strengths.csv)
for index, row in alarmData.iterrows(): # Go over data by rows
    # Some SO code that makes the image fullscreen when plotted
    fig, ax = plt.subplots(frameon=False)
    ax.set_axis_off()
    
    # Initialize a graph to overlay on the video
    G = nx.Graph()
    colorMap = []

    # Extract the current frame from the row of data
    frame = int(row['Frame']) 
    # Extract positional information for the current frame
    frameData = physicalData[frame][1] 
    # Load the background image for the frame and plot it
    img = mpimg.imread('reference_frames/output_{}.png'.format(str(frame).rjust(4, '0')))
    ax.imshow(img, aspect='equal')

    whiteLabels = dict()
    blackLabels = dict()

    # Loop over each ant
    for i in range(1, 62):
        # Extract physical ant data
        antData = frameData[(frameData.id == i)]
        # Extract position
        x = float(antData['locX'])
        y = float(antData['locY'])
        # Add ant position to current graph
        G.add_node(i, pos=(x, y))
        # Extract alarm strength
        if i in original:
            alarm_strength = 1.0
        else:
            alarm_strength = row['V' + str(i)]

        if alarm_strength > 0.5:
            whiteLabels[i] = str(i)
        else:
            blackLabels[i] = str(i)
        # Colorize the currrent ant based on alarm strength
        colorMap.append(alarm_strength)

    pos = nx.get_node_attributes(G, 'pos')
    # Draw the graph on top of the background
    nx.draw(G, pos, ax=ax, node_color=colorMap, node_size=70, cmap=plt.cm.Reds)
    fsize = 14
    nx.draw_networkx_labels(G, pos, ax=ax, labels=whiteLabels, font_size=fsize, font_color='w')
    nx.draw_networkx_labels(G, pos, ax=ax, labels=blackLabels, font_size=fsize)

    # Save the frame-image and clear the plot
    plt.axis('off')
    plt.subplots_adjust(top = 1, bottom = 0, right = 1, left = 0,
            hspace = 0, wspace = 0)
    plt.margins(0, 0)
    plt.gca().xaxis.set_major_locator(NullLocator())
    plt.gca().yaxis.set_major_locator(NullLocator())

    fig.savefig('frames/{}.png'.format(str(frame).rjust(4, '0')), dpi=300, bbox_inches='tight', pad_inches=0)
    fig.clf()
    del img
    print('{}/{}'.format(frame, alarmData.Frame.max()))
    if frame == 600:
        break
