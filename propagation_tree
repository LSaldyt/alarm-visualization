#!/usr/bin/env python3
from  matplotlib.patches import Patch
import networkx as nx
import matplotlib.pyplot as plt

import pandas

try:
    from networkx.drawing.nx_agraph import graphviz_layout
    #from networkx import graphviz_layout
except ImportError:
    raise ImportError("This example needs Graphviz and either PyGraphviz or Pydot")


def create_graph():
    propagationData = pandas.read_csv('UpdatedPropagationRecords.csv')

    G = nx.DiGraph()
    colors = []
    legend_handles = []

    seen = set()

    def add(node, color, label=None):
        if node not in seen:
            G.add_node(node, label=str(node) if label is None else label)
            colors.append(color)
            seen.add(node)

    time_colors = [(r/255, g/255, b/255) 
                   for r, g, b in
                   [(178, 2, 0),
                    (255, 55, 33),
                    (255, 88, 32),
                    (255, 139, 32),
                    (255, 173, 32)]]
    self_excite_color = (235/255, 135/255, 255/255)
    passive_color = (0.3, 0.5, 1.0)

    legend_handles.append(Patch(color=time_colors[0], label='Source ant'))
    legend_handles.append(Patch(color=time_colors[-1], label='Terminal ant'))

    legend_handles.append(Patch(color=self_excite_color, label='Independent Excitement'))
    legend_handles.append(Patch(color=passive_color, label='Passive'))

    for index, row in propagationData.iterrows():
        source, dest = row['AlarmedFrom'], row['Alarmed']
        if row['TimeForAlarm'] == 1:
            time_color = time_colors[0]
        else:
            time_color = time_colors[min(row['TimeForAlarm'], len(time_colors) - 1)]
            #time_color = (1.0, max(min(0.7, (row['TimeForAlarm']) / 5), 0.2), 0.1)
        if not row['Self-Excitation']:
            add(source, time_color)
            add(dest,   time_color)
            G.add_edge(source, dest)
        else:
            add(source, self_excite_color, label=(str(source) + '!'))
    for i in range(61):
        if i not in seen:
            add(i, passive_color, label=(str(source) + '!'))
    print(colors)
    return G, colors, legend_handles

def visualize(G, colors, legend_handles):
    # dot, neato, fdp, sfdp, twopi, circo: see https://www.graphviz.org/
    pos=graphviz_layout(G, prog='dot', args='')
    #plt.figure(figsize=(8,8))
    plt.title('Alarm signal propagation from three source ants')
    nx.draw(G, pos, node_size=350, font_size=12, alpha=0.9, node_color=colors, with_labels=True, arrows=True)
    plt.legend(handles=legend_handles)
    plt.savefig('circular_tree.png')
    plt.show()

def main():
    visualize(*create_graph())

if __name__ == '__main__':
    main()
